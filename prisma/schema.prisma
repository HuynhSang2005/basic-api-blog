// Blog API Prisma Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum UserRole {
  USER
  ADMIN
  AUTHOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Users table (Người dùng)
model User {
  id           Int        @id @default(autoincrement())
  username     String     @unique
  password     String     
  email        String     @unique
  fullName     String?    @map("full_name")
  avatarUrl    String?    @map("avatar_url")
  role         UserRole   @default(USER)  // ← THÊM FIELD ROLE
  status       UserStatus @default(ACTIVE)
  lastLoginAt  DateTime?  @map("last_login_at")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  deletedAt    DateTime?  @map("deleted_at")

  // Relations
  refreshTokens RefreshToken[]
  posts         Post[]

  @@index([email])
  @@index([status])
  @@index([role])  
  @@map("users")
}

// Refresh Tokens table (JWT Refresh Token)
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// Categories table (Danh mục bài viết)
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String? // Hex color code like #FF5733
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  posts Post[]

  @@index([slug])
  @@map("categories")
}

// Posts table (Bài viết)
model Post {
  id             Int         @id @default(autoincrement())
  title          String
  slug           String      @unique
  content        String
  excerpt        String?
  featuredImage  String?     @map("featured_image")
  status         PostStatus  @default(DRAFT)
  viewCount      Int         @default(0) @map("view_count")
  authorId       Int         @map("author_id")
  categoryId     Int?        @map("category_id")
  publishedAt    DateTime?   @map("published_at")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  postTags PostTag[]

  @@index([authorId])
  @@index([categoryId])
  @@index([status])
  @@index([publishedAt])
  @@index([slug])
  @@map("posts")
}

// Tags table (Thẻ tag)
model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")

  // Relations
  postTags PostTag[]

  @@index([slug])
  @@map("tags")
}

// Post Tags table (Quan hệ nhiều-nhiều giữa Posts và Tags)
model PostTag {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
  @@map("post_tags")
}